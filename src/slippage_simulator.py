# -*- coding: utf-8 -*-
"""slippage_simulator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r52ASNGWLjMWu6xB1Wa5RGeN59Fo_2PN
"""

import numpy as np
import pandas as pd

def simulate_slippage(book_snapshot: pd.Series, size: int, side: str='buy'):
    """
    Simulate sending a market order of `size` shares.
    side='buy' eats into asks, side='sell' eats into bids.
    Returns slippage = (avg_fill_price - mid) for buys; (mid - avg_fill) for sells.
    """
    prices = book_snapshot['ask_prices'] if side=='buy' else book_snapshot['bid_prices']
    sizes  = book_snapshot['ask_sizes']  if side=='buy' else book_snapshot['bid_sizes']
    rem = size
    cost = 0.0
    for p,s in zip(prices, sizes):
        take = min(rem, s)
        cost += take * p
        rem -= take
        if rem<=0: break
    if rem>0:
        # partial fill; assume worst price
        cost += rem * prices[-1]
        rem = 0
    avg_price = cost/size
    mid = book_snapshot['mid_price']
    return (avg_price-mid) if side=='buy' else (mid-avg_price)

def build_impact_curve(df: pd.DataFrame, size_grid: np.ndarray, side: str='buy'):
    """
    For each x in size_grid, simulate slippage on every row of df,
    then return (size_grid, avg_slippage).
    """
    slippages = {x: [] for x in size_grid}
    for _,row in df.iterrows():
        for x in size_grid:
            slippages[x].append(simulate_slippage(row, x, side=side))
    avg_slip = np.array([np.mean(slippages[x]) for x in size_grid])
    return size_grid, avg_slip